{
	"info": {
		"_postman_id": "fd259c0d-0419-4cd2-bfb8-61320fb67a6c",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//name в ответе равно name s request (name вбить руками.)\r",
							"var respData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"pm.test(\"person's name is correct\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Billy\");\r",
							"});\r",
							"\r",
							"//age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"person's age is correct\", function () {\r",
							"    pm.expect(respData.age).to.eql('25');\r",
							"});\r",
							"//console.log(\"person's age:\" + respData.age)\r",
							"\r",
							"//salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"person's salary is correct\", function () {\r",
							"    pm.expect(respData.salary).to.eql(1200);\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"// - сделано выше, во 2 пункте\r",
							"// let post_form_data = request.data;\r",
							"\r",
							"// name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"person's name is correct\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"person's age is correct\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"person's salary is correct\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"    // console.log(reqData.salary)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(respData.family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year equals salary*4\"), function () {\r",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);\r",
							"}\r",
							"\r",
							"// console.log(respData.family.u_salary_1_5_year);\r",
							"// console.log(reqData.salary * 4);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Billy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1200",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"console.log(respData)\r",
							"pm.test(\"response is json\", function () {\r",
							"    pm.response.to.be.json; // проверка формата\r",
							"});\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"console.log(reqData)\r",
							"pm.test(\"request is json\"), function () {\r",
							"    pm.request.to.be.json;\r",
							"};\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"person's name is correct\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"// console.log(respData.name, reqData.name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"person's age is correct\", function () {\r",
							"    pm.expect(+respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"// console.log(respData.age, reqData.age)\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"person's salary is correct\", function () {\r",
							"    pm.expect(Number(respData.salary)).to.eql(Number(reqData.salary));\r",
							"});\r",
							"console.log(respData.salary, reqData.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(respData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog has a name\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.a.property(\"name\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog has an age\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.a.property(\"age\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog's name is Luky\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog's age is 4\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Juliet&age=44&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Juliet"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"console.log(respData)\r",
							"pm.test(\"response is json\", function () {\r",
							"    pm.response.to.be.json; // проверка формата ответа\r",
							"});\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject()\r",
							"console.log(reqData)\r",
							"pm.test(\"request is json\"), function () {\r",
							"    pm.request.to.be.json; //проверка формата запроса\r",
							"};\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"person's name is correct\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"// console.log(respData.name, reqData.name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"person's age is correct\", function () {\r",
							"    pm.expect(+respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"console.log(respData.age, reqData.age)\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"console.log(respData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary's 0 element from response equals salary from request\"), function () {\r",
							"    pm.expect(respData.salary[0]).to.eql(reqData.salary)\r",
							"}\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary's 1 element from response equals salary from request * 2\"), function () {\r",
							"    pm.expect(respData.salary[1]).to.eql((reqData.salary) * 2)\r",
							"}\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary's 2 element from response equals salary from request * 3\"), function () {\r",
							"    pm.expect(respData.salary[2]).to.eql((reqData.salary) * 3)\r",
							"}\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// можно руками, а можно вот так:\r",
							"pm.environment.set(\"name\")\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Leo\")\r",
							"// здесь прописала name руками\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqData.age)\r",
							"// здесь забрала age из реквеста(то, что прописывала руками в params)\r",
							"\r",
							"// / 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", respData.salary)\r",
							"/*здесь забрала salary из ответа, \r",
							"и в переменную передалось сразу 3 значения - salary, salary *2 и salary *3 */\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let number = 0; number < 3;  number += 1) {\r",
							"  console.log(respData.salary[number])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Leo&age=33&salary=1300",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Leo"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// - сделано на вкладке body\r",
							" \r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var respData = pm.response.json();\r",
							"console.log(respData)\r",
							"pm.test(\"response is json\", function () {\r",
							"    pm.response.to.be.json; // проверка формата ответа\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"var reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response has start_qa_salary param\", function () {\r",
							"   pm.expect(respData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response has qa_salary_after_6_months param\", function () {\r",
							"   pm.expect(respData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response has qa_salary_after_12_months param\", function () {\r",
							"   pm.expect(respData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response has qa_salary_after_1.5_year param\", function () {\r",
							"   pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response has qa_salary_after_3.5_years param\", function () {\r",
							"   pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response has person param\", function () {\r",
							"   pm.expect(respData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary from response equals salary from request\", function () {\r",
							"    pm.expect(+respData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months from response equals salary*2 from request\", function () {\r",
							"    pm.expect(+respData.qa_salary_after_6_months).to.eql(reqData.salary * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months from response equals salary*2.7 from request\", function () {\r",
							"    pm.expect(+respData.qa_salary_after_12_months).to.eql(reqData.salary * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year from response equals salary*3.3 from request\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(reqData.salary * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years from response equals salary*3.3 from request\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(reqData.salary * 3.8);\r",
							"});\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"1st element from u_name in response equals salary in request\", function() {\r",
							"    pm.expect(+respData.person.u_name[1]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from response equals age from request\", function() {\r",
							"    pm.expect(+respData.person.u_age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years from response equals salary * 4.2 from request\", function() {\r",
							"    pm.expect(+respData.person.u_salary_5_years).to.eql(+reqData.salary * 4.2)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}